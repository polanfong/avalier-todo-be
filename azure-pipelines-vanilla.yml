#https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops

trigger:
- master

resources:
- repo: self

variables:
  vmImageName: 'ubuntu-latest'
  dockerId: 'avalier.azurecr.io'
  dockerImageName: 'avalier-todo-be'

stages:
- stage: CI
  displayName: Build and push
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: UseDotNet@2
      displayName: 'Use dotnet sdk 3.x'
      inputs:
        version: 3.x
        includePreviewVersions: true

    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: 'src/Avalier.Todo.sln'
        arguments: '--configuration Release' # Update this to match your need
      displayName: 'Building'

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '**/*.Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Agent.TempDirectory)/Coverage/'
      displayName: 'Testing'

    #- script: dotnet tool install dotnet-reportgenerator-globaltool --global
    #- script: reportgenerator -reports:$(Agent.TempDirectory)/Coverage/coverage.cobertura.xml -targetdir:$(Agent.TempDirectory)/Coverage/Reports
        
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: XUnit
        testResultsFiles: '**/*.trx'
      displayName: 'Publish Test Results'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/Coverage/coverage.cobertura.xml'
        reportDirectory: '$(Agent.TempDirectory)/Coverage/reports'
      displayName: 'Publish Coverage Results'

